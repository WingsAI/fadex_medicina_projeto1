#!/usr/bin/env python3
"""
FADEX - Script de Teste Standalone
Testa o algoritmo de scoring de qualidade sem necessidade de infraestrutura
"""

import sys
import os
import json
from pathlib import Path
import numpy as np
import cv2
from datetime import datetime
from typing import Optional

# Adiciona src ao path (subindo um n√≠vel de scripts/ para raiz, depois entrando em src/)
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from ml.scoring.fadex_core import analyze_image_quality, FadexScore


class FadexTester:
    """Classe para facilitar testes do sistema FADEX"""

    def __init__(self, output_dir: str = "results"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)

    def load_image(self, image_path: str) -> Optional[np.ndarray]:
        """Carrega imagem de arquivo"""
        try:
            image = cv2.imread(image_path)
            if image is None:
                print(f"‚ùå Erro ao carregar: {image_path}")
                return None

            # Converte BGR para RGB
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            return image
        except Exception as e:
            print(f"‚ùå Erro ao carregar {image_path}: {e}")
            return None

    def analyze_single_image(
        self,
        image_path: str,
        exam_type: str = 'fundoscopy',
        save_results: bool = True
    ) -> Optional[FadexScore]:
        """Analisa uma √∫nica imagem"""

        print(f"\n{'='*60}")
        print(f"üî¨ Analisando: {Path(image_path).name}")
        print(f"{'='*60}")

        # Carrega imagem
        image = self.load_image(image_path)
        if image is None:
            return None

        print(f"‚úì Imagem carregada: {image.shape}")

        # Metadata
        metadata = {
            'filename': Path(image_path).name,
            'shape': image.shape,
            'exam_type': exam_type,
            'timestamp': datetime.now().isoformat()
        }

        # An√°lise FADEX
        print("‚öôÔ∏è  Executando an√°lise FADEX...")
        score = analyze_image_quality(image, exam_type, metadata)

        # Exibe resultados
        self._print_results(score)

        # Salva resultados
        if save_results:
            self._save_results(score, Path(image_path).stem)

        return score

    def analyze_batch(
        self,
        images_dir: str,
        exam_type: str = 'fundoscopy',
        pattern: str = "*.png"
    ):
        """Analisa m√∫ltiplas imagens de um diret√≥rio"""

        images_path = Path(images_dir)
        image_files = list(images_path.glob(pattern))

        if not image_files:
            print(f"‚ùå Nenhuma imagem encontrada em {images_dir} com padr√£o {pattern}")
            return

        print(f"\nüîç Encontradas {len(image_files)} imagens para an√°lise")

        results = []
        for img_file in image_files:
            score = self.analyze_single_image(str(img_file), exam_type, save_results=True)
            if score:
                results.append({
                    'filename': img_file.name,
                    'global_score': score.global_score,
                    'ml_readiness': score.ml_readiness,
                    'clinical_adequacy': score.clinical_adequacy
                })

        # Salva resumo do batch
        self._save_batch_summary(results)

    def _print_results(self, score: FadexScore):
        """Imprime resultados formatados"""

        print(f"\nüìä RESULTADOS FADEX")
        print(f"{'‚îÄ'*60}")

        # Score global com indicador visual
        score_bar = self._get_score_bar(score.global_score)
        print(f"üéØ Score Global: {score.global_score:.1f}/100 {score_bar}")
        print(f"üîç Confian√ßa: {score.confidence:.1f}%")
        print(f"ü§ñ ML Readiness: {score.ml_readiness.upper()}")
        print(f"üè• Adequa√ß√£o Cl√≠nica: {score.clinical_adequacy.upper()}")

        # Scores por dimens√£o
        print(f"\nüìà Scores por Dimens√£o:")
        for dim, value in score.dimension_scores.items():
            bar = self._get_score_bar(value, width=20)
            print(f"  ‚Ä¢ {dim:20s}: {value:5.1f}/100 {bar}")

        # Recomenda√ß√µes
        print(f"\nüí° Recomenda√ß√µes:")
        for i, rec in enumerate(score.recommendations, 1):
            print(f"  {i}. {rec}")

        print(f"{'‚îÄ'*60}\n")

    def _get_score_bar(self, score: float, width: int = 30) -> str:
        """Gera barra visual de score"""
        filled = int((score / 100) * width)
        empty = width - filled

        if score >= 85:
            color = "üü¢"
        elif score >= 70:
            color = "üü°"
        elif score >= 50:
            color = "üü†"
        else:
            color = "üî¥"

        bar = "‚ñà" * filled + "‚ñë" * empty
        return f"{color} [{bar}]"

    def _save_results(self, score: FadexScore, filename_base: str):
        """Salva resultados em JSON"""

        output_file = self.output_dir / f"{filename_base}_results.json"

        results_dict = {
            'global_score': score.global_score,
            'confidence': score.confidence,
            'ml_readiness': score.ml_readiness,
            'clinical_adequacy': score.clinical_adequacy,
            'dimension_scores': score.dimension_scores,
            'recommendations': score.recommendations,
            'metadata': score.metadata,
            'analysis_timestamp': datetime.now().isoformat()
        }

        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results_dict, f, indent=2, ensure_ascii=False)

        print(f"üíæ Resultados salvos em: {output_file}")

    def _save_batch_summary(self, results: list):
        """Salva resumo do batch"""

        output_file = self.output_dir / f"batch_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        summary = {
            'total_images': len(results),
            'timestamp': datetime.now().isoformat(),
            'statistics': {
                'mean_score': np.mean([r['global_score'] for r in results]),
                'std_score': np.std([r['global_score'] for r in results]),
                'min_score': min([r['global_score'] for r in results]),
                'max_score': max([r['global_score'] for r in results]),
            },
            'ml_readiness_distribution': self._count_categories(results, 'ml_readiness'),
            'clinical_adequacy_distribution': self._count_categories(results, 'clinical_adequacy'),
            'results': results
        }

        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)

        print(f"\nüìä Resumo do batch salvo em: {output_file}")
        print(f"\nüìà Estat√≠sticas:")
        print(f"  ‚Ä¢ Score m√©dio: {summary['statistics']['mean_score']:.1f}")
        print(f"  ‚Ä¢ Desvio padr√£o: {summary['statistics']['std_score']:.1f}")
        print(f"  ‚Ä¢ Range: {summary['statistics']['min_score']:.1f} - {summary['statistics']['max_score']:.1f}")

    def _count_categories(self, results: list, key: str) -> dict:
        """Conta distribui√ß√£o de categorias"""
        counts = {}
        for r in results:
            category = r[key]
            counts[category] = counts.get(category, 0) + 1
        return counts


def main():
    """Fun√ß√£o principal para testes via CLI"""

    print("="*60)
    print("üè• FADEX - Sistema de An√°lise de Qualidade de Imagens")
    print("="*60)

    # Inicializa tester
    tester = FadexTester()

    # Verifica argumentos
    if len(sys.argv) < 2:
        print("\nüìù Uso:")
        print("  python scripts/test_fadex.py <imagem>              # Analisa uma imagem")
        print("  python scripts/test_fadex.py <diret√≥rio> --batch   # Analisa m√∫ltiplas imagens")
        print("\nExemplos:")
        print("  python scripts/test_fadex.py examples/fundus_01.png")
        print("  python scripts/test_fadex.py examples/ --batch")

        # Se n√£o h√° argumentos, tenta usar imagens de exemplo
        examples_dir = Path("examples")
        if examples_dir.exists():
            print(f"\nüí° Encontrado diret√≥rio examples/, executando an√°lise batch...")
            tester.analyze_batch("examples", pattern="*.png")
        else:
            print(f"\n‚ö†Ô∏è  Diret√≥rio examples/ n√£o encontrado. Crie imagens de teste primeiro.")
            print(f"    Execute: python scripts/create_test_images.py")

        return

    # Processa argumentos
    path = sys.argv[1]
    is_batch = "--batch" in sys.argv
    exam_type = "fundoscopy"  # Default

    # Verifica tipo de exame
    for arg in sys.argv:
        if arg.startswith("--exam="):
            exam_type = arg.split("=")[1]

    # Executa an√°lise
    if is_batch:
        tester.analyze_batch(path, exam_type=exam_type)
    else:
        if not os.path.exists(path):
            print(f"‚ùå Arquivo n√£o encontrado: {path}")
            return

        tester.analyze_single_image(path, exam_type=exam_type)


if __name__ == "__main__":
    main()
